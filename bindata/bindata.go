// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// assets/tpl/curd.tpl
// assets/tpl/curd2.md
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x6b\xe3\x46\x14\x3f\x57\x9f\xe2\x55\x87\xa0\x89\x85\x02\x6d\xe9\x21\xc1\x94\x90\xba\xad\xc1\x75\x89\xed\xf4\x12\x42\x50\xa4\x67\x57\x54\x9e\x71\x66\x46\xd8\x45\xe8\x5e\x0a\x6d\x4f\x49\x0f\x65\x61\x73\xdb\xd3\x92\xc3\x42\x0e\xcb\x7e\x1c\x87\x7c\x8c\x65\x66\x14\x47\xb6\x65\xcb\xc9\x7a\x75\x49\xa4\x79\xf3\xfe\xfc\x7e\xbf\xf7\x9e\x2d\xcb\xb2\xfa\x09\x0d\x60\x80\x32\x4d\xbd\xae\xe4\x49\x20\x7b\xfe\x45\x8c\x6d\x7f\x88\x59\xa6\xff\x75\x08\x08\xc9\x23\x3a\x80\xd4\x02\x00\xe0\x28\x13\x4e\xc1\x4e\x53\xaf\x60\x6a\x5b\x99\x65\x05\x8c\x0a\x09\x11\x15\xc8\x4b\xfd\xfd\x10\x61\x1c\x0a\xa8\xeb\xcb\x4d\x6d\xa6\x3f\xb5\x22\x21\x95\x8b\xdc\x41\x1c\x89\xea\xeb\x87\x71\x5c\x76\x37\xbc\x28\xbb\xa9\xee\x24\x02\xb9\x6d\xea\x75\x22\x89\x43\xd8\x2d\xb3\x24\xd0\x0d\x7c\xea\x70\x36\x86\xf0\xc2\xeb\xb0\x31\x01\x07\x39\x07\xe4\x9c\x71\x62\x10\x88\xfa\xea\x15\xea\xc0\xd9\xd8\xd3\xe6\xfa\xb3\x7a\xd2\x94\xfb\x74\x80\xe0\xb5\x93\x3c\x3f\xd1\xa4\x7d\x96\x65\x3b\x2a\xa4\x97\xa6\xde\x4f\xc9\x70\x64\x42\xb9\x96\xb9\x81\x34\xcc\x32\x72\xa0\x7d\x7e\x59\x07\x1a\xc5\x39\xd2\x4f\x68\xeb\xd7\xac\x00\xbf\x42\x7b\x6f\x0f\xee\xef\xde\x4f\xff\x7a\x6d\x38\xf4\xc3\xb0\xb4\x74\x27\x90\x13\x08\x18\x95\x38\x91\xde\x91\xf9\xeb\x82\x46\xa0\x14\x00\x27\xf6\x85\x6c\x86\x10\x51\xf9\xed\x37\x2e\x2c\x16\x1f\x30\x4a\x61\xbf\xae\xd0\xf9\x11\xa5\x72\xee\xe6\xd8\x12\x7d\x2e\x2e\x63\x75\x6c\x37\xdb\xdd\x46\xa7\x07\xcd\x76\xef\x17\xb0\xa1\x56\x25\xb1\x1a\xd8\xe0\x28\xbb\x4a\xf5\xd4\xc0\x26\xca\xe3\x0c\x22\xf5\xd8\xbf\x1e\xb6\x4e\x1a\x5d\x70\x66\xc2\xfa\xd9\xe7\xbf\x67\x19\xb1\xb5\xd9\x65\x9e\x71\xf7\xb8\x65\x4e\x9d\xf5\xe9\xb8\xaa\x0c\x92\xe3\x2d\x0c\x08\xfb\x75\x5d\xbb\xd7\x98\x60\x90\xc3\x68\xaa\xbf\x74\x97\xe9\x37\x51\x0c\xf5\xab\x98\x2f\xb2\x5f\xd4\x55\xb5\x06\x0c\x43\x2e\x9c\x2b\x0d\xa2\xf0\x5a\xea\xdd\x44\x0c\x1d\xb2\x20\x13\x2d\x8e\x10\xe3\xe7\x88\x43\xb3\x8f\xbc\xef\x07\x98\x66\x25\x1d\xb0\xa9\x08\x42\x8c\x51\x22\xf4\x39\x1b\x6e\x2a\x82\xf1\x6f\xc8\x51\x65\x50\x87\xef\x96\xc8\xfb\x5e\xfb\xdb\x9c\xbc\x73\x37\xef\xd4\x55\xcc\x41\x14\x2e\xe2\xa5\xfa\xea\xe1\x9f\xbb\xe9\xbf\xd7\xd3\xbf\xaf\xee\x5f\xdd\x3c\xbc\xbd\x9d\x7e\xb8\x5a\x3b\x27\x57\xc0\x68\x4a\x31\xc3\xd3\x05\x9f\x0f\x04\x9c\x9e\x15\x81\xd5\x63\xa6\xcc\xe1\x66\x6d\x57\x3e\xeb\x66\x0c\xf4\x70\x22\x35\x0b\x02\x63\x0c\xa4\x26\xa0\x62\xb4\x2a\x02\x9e\x43\x96\x32\xd3\x55\x2e\x12\xd5\xd5\x21\x37\x21\x4a\x65\x39\x4b\xb9\xc3\xc6\xb3\x3e\x3b\x4e\x90\xff\xd1\x61\xe3\x45\xc6\x14\x8e\x9e\xe7\x91\x15\xa3\xd8\x78\x21\x07\x2a\x91\xa6\x68\xb3\x0e\x1b\x8b\x06\xe7\x4a\xc2\x24\xef\xa9\x2f\xcc\x15\x1a\xc5\x2b\xe7\xea\xff\xef\xee\xaf\x6f\x0d\xe7\xc9\x28\xf4\x25\x96\x95\x51\xce\xba\xb1\xef\x4a\x3e\x63\xbe\x5a\x07\x4f\x6c\xc3\xa7\xd3\x6d\x12\xd8\x94\x42\x81\x46\x19\x4f\x69\xaf\x25\xf6\x44\x9b\x3d\x8f\xd8\xea\x2e\x9c\xe3\x74\x8e\x89\xe9\x9f\xff\x3d\xdc\xbc\x31\x4c\xac\x12\xef\x4b\xdb\x0f\x54\xff\x89\x0e\x8a\x24\x96\x70\x7a\x56\xd5\x88\x5b\xa0\xe6\x25\x9d\x58\x5b\x8f\x75\x6d\xcb\x5d\xa8\x20\x99\x5f\x78\xba\x11\x37\xe9\xc2\xa5\xc5\x55\xba\xbc\x42\xec\x23\xd7\x61\xbc\xa3\x98\x09\xcc\x17\x56\x9f\xe5\x1f\xdb\x2a\x0c\x59\xf4\x62\x06\x43\x59\x19\x69\x36\x67\xb9\x3c\x11\x94\xd7\x55\x3f\xaf\x4a\xb2\x7c\x7c\xb2\xc5\x04\x1e\x95\x52\x07\x7f\x34\x42\x1a\x16\xd4\xe3\xaa\x73\x52\x28\x72\x96\x82\xf0\xd4\xf0\x59\xda\x31\x46\xd0\x01\x4b\xe8\x76\x17\x8a\x64\xd2\x8f\xd5\xf2\xfe\xfa\xab\xcf\xb2\x43\x74\xc6\xce\x2e\x79\xd4\x66\xc5\x84\xd9\xb6\x38\x0b\x63\xa4\x6a\x3d\x18\xee\x77\x34\x20\xcb\xf0\x5b\x1f\x03\x00\x00\xff\xff\x9b\x62\x60\x7c\xfb\x0c\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 3323, mode: os.FileMode(420), modTime: time.Unix(1610535694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplCurd2Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4f\x6f\xe3\x44\x14\x3f\xc7\x9f\xe2\xe1\xc3\xca\xde\x5a\x8e\x04\x88\xc3\xa2\x08\x2d\x6d\x59\x22\x85\xa0\x6d\xba\x5c\x56\xab\xca\xb5\x5f\x8a\xc5\x64\xa6\x9d\x19\x93\x22\xcb\xf7\x15\x12\x70\xda\x45\x08\x21\xed\x4a\x1c\x38\xa1\x3d\x20\xed\x01\xf1\x71\x52\x95\x6f\x81\x66\xc6\xc9\xba\xce\xb8\x76\x43\x0a\x1c\xf0\xa5\x75\xfc\x32\xf3\xde\xef\xcf\xbc\xe7\x38\x8e\xe3\x4c\x33\x1a\xc3\x09\xca\x3c\x0f\x27\x92\x67\xb1\x3c\x8c\x8e\x09\x8e\xa3\x19\x16\xc5\xea\x5f\xcf\x07\x21\x79\x4a\x4f\x20\x77\x00\x00\x38\xca\x8c\x53\x70\xf3\x3c\xac\x84\xbb\x4e\xe1\x38\x31\xa3\x42\x42\x4a\x05\x72\xeb\x9a\x1f\xa5\x48\x12\x01\x03\x70\xdd\x65\x30\x49\x45\xd7\xd0\xe4\xd8\x16\xa8\x42\x32\x81\xdc\x35\xe5\x78\xa9\xc4\x19\xdc\xb5\x45\xfa\x30\x89\x23\xea\x71\x36\x87\xe4\x38\x3c\x60\x73\x1f\x3c\xe4\x1c\x90\x73\xc6\x7d\x53\x5c\x3a\x55\xb7\x30\x00\xce\xe6\xa1\x0e\xd7\x1f\xab\x2b\xcf\x79\x44\x4f\x10\xc2\x71\x46\x88\x49\x6f\x48\xa7\xac\x28\x56\x11\x77\xd4\x97\xf2\x3c\xfc\x38\x9b\x9d\x9a\x2d\x83\xca\xb7\x91\x26\x65\xac\xff\xbe\xde\xe4\xad\x01\xd0\x94\x94\xa8\xbe\x41\x56\xdf\x16\x15\xa8\x15\xb2\xfd\x3e\x5c\xbc\xfe\x7d\xf1\xf5\x0b\xc3\x59\x94\x24\x5e\x2c\xcf\x21\x66\x54\xe2\xb9\x0c\x77\xcd\xdf\x00\xbe\x8c\x48\x86\x60\xab\xde\x23\x91\x90\xc3\x04\x52\x2a\xdf\x7b\x37\x80\x7a\xe1\x31\xa3\x14\xee\x0d\x14\x32\x0f\x50\xaa\xc5\x83\x12\x57\x5f\x3f\x17\x67\x44\x3d\x76\x87\xe3\xc9\xfe\xc1\x21\x0c\xc7\x87\x9f\x82\x0b\x3b\x5d\xd4\xb3\x03\x2e\x78\x79\x1e\x0e\xb5\x2e\x34\x72\xa3\x54\x48\x45\x88\x0b\x3b\xab\xea\xd5\xe5\x7e\x76\x7f\xf4\x68\x7f\x52\x09\xff\x24\xe2\x5f\x14\x85\xef\xea\xb0\xb3\x32\xc3\xc9\xc3\x91\x79\xea\xb5\x6f\x1f\xa8\xd4\xfd\x12\x4e\x61\x0a\xbf\x37\xd0\xf5\x86\xfb\xe7\x18\x97\xd0\x99\x8a\xcf\x82\x75\xba\xcd\x4e\x86\x6a\x0d\x6f\x0b\xc5\x7e\x55\x48\xed\x1c\x1b\x5a\x02\x38\x52\xa2\x43\x11\x8e\xd4\xbd\xd9\x32\xf1\xfc\x9a\x0c\x34\xf9\x09\x12\x3b\xf9\xa9\x66\x17\xf9\x34\x8a\x31\x2f\x2c\xea\xee\x4a\x72\x82\x04\x25\xc2\x94\xb3\xd9\x4d\x48\x9e\x7f\x8e\x1c\x55\x16\x03\xf8\x60\x8d\xb0\x3d\xbd\xe6\xcd\x08\x3b\x0a\x4a\x37\x36\xb1\x05\x69\x52\x87\x68\x75\xae\xdd\x4f\x12\xab\x0f\x6e\xe8\x1b\xbf\xd1\x38\xd0\x0c\xaa\x6d\xa1\xa3\xbd\x0f\xff\x29\x2b\xfd\x6f\xa3\xeb\x6d\xd4\xef\xc3\xe2\xe9\x8b\x3f\x7f\xf8\x79\xf1\xcd\xb3\x8b\x9f\x5e\x5e\xfe\xfa\x6a\xf1\xc7\x33\xa3\x9a\x3d\x24\xdd\x55\x63\x04\x6f\xba\x63\x00\x11\x3f\x11\xf0\xf8\x49\x93\x05\x37\x91\x4b\xcf\xe6\xc8\xab\x8d\x57\x4b\x47\x27\xe2\xf4\xd6\xed\x56\xef\xd2\x25\x8d\x4e\xaf\xdd\x5a\xaa\x9c\x30\x0c\x2d\xd8\x5d\x7e\xfb\x7a\xf1\xdd\xf3\x75\xec\x1e\xd8\x55\x64\xc7\x6e\x6a\x1a\xfc\x12\xbc\x56\x28\x75\xdf\xb6\x2d\xdf\xad\x97\xb5\x39\xf2\x10\xcf\xa5\x46\x5a\x20\xc1\x58\x6a\x54\xcb\x14\x95\xe9\xae\x07\xbe\x66\xaa\x89\x5e\xc2\x8e\xbd\xda\xc7\x6c\x5a\x81\xff\x61\x86\xfc\xab\x03\x36\x6f\xa2\xa0\x36\x89\xa8\xab\xd7\x6b\x9c\x47\x2c\x63\x48\xbf\xaf\x92\xdf\x65\xb3\x19\x52\x59\x99\x58\x96\x2b\x55\x1c\x77\x75\xe6\xf8\xf1\xb7\x8b\xe7\xaf\x0c\xbb\x8f\x4e\x93\x48\x62\x77\x82\x33\x1d\x3f\x91\xfc\x06\x1c\x6f\xe5\x70\x5d\x51\x69\x32\xa8\xd3\x26\xd0\xb0\xfb\x26\x3f\x45\x70\x23\x99\xa6\xec\x36\x32\xff\x8e\x9d\x16\x4f\xbf\xbf\x7c\xf9\x8b\x01\x59\x8d\xc3\x1b\x9f\x35\x9c\xcd\xc5\x01\x8a\x8c\x48\x78\xfc\xa4\xcd\x2a\xdb\x00\xb8\xe2\x95\x96\x39\xfe\x96\x3c\xa4\x2a\xbe\xda\x8b\xb4\x95\xae\xc5\xbe\xa9\xa5\x58\xdb\x4a\x82\x53\xe4\x7a\x9b\x70\x97\x30\x81\x65\x2b\x99\xb2\xf2\xc3\xb1\xda\xc6\xaf\xaf\xc2\xe6\x2a\x1f\x1b\x1c\xf9\x55\xef\xad\xbf\x6e\xa8\x55\x9b\xde\x0f\x2c\x59\x2e\xaf\xa2\x9e\xc0\x52\x08\x03\x88\x4e\x4f\x91\x26\x15\x71\x04\xea\xb9\x5f\x29\x72\x95\x82\x08\xf7\x39\x5f\xeb\x96\x75\x8d\x8e\x1a\xa8\xde\xde\x39\xff\xaf\xa9\xf8\x76\x4f\xfc\x6d\xa9\xb5\xd7\xab\x28\xa0\xd7\x28\xd4\x16\xa5\x76\x53\x69\x55\xa1\xc2\xd2\x87\xb6\xd5\x85\xac\x1d\x69\x15\x71\x9d\x23\x6a\x6e\x28\x9c\x0d\x5c\x60\xb7\x41\xdd\x07\x5a\xfd\x31\xcb\xe8\xa6\x47\xb4\x27\x99\x8c\x88\x7a\x93\x78\xe7\xed\x6e\x63\x8b\xfd\x37\x8f\x46\x0d\x9b\xe4\xee\xfa\xff\x89\x79\xe5\x8e\xae\xd6\xf2\x7e\xf6\x57\x00\x00\x00\xff\xff\xea\x88\x00\xbd\x7b\x12\x00\x00")

func assetsTplCurd2MdBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurd2Md,
		"assets/tpl/curd2.md",
	)
}

func assetsTplCurd2Md() (*asset, error) {
	bytes, err := assetsTplCurd2MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd2.md", size: 4731, mode: os.FileMode(420), modTime: time.Unix(1610531769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl": assetsTplCurdTpl,
	"assets/tpl/curd2.md": assetsTplCurd2Md,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl": &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"curd2.md": &bintree{assetsTplCurd2Md, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
