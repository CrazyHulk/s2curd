// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// assets/tpl/curd.tpl
// assets/tpl/curd2.md
// assets/tpl/mc.tpl
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5d\x6e\xd4\x3c\x14\x7d\xcf\x2a\xee\x17\x8d\xaa\xa4\x5f\xe4\x4a\x80\x78\x28\x1a\x55\xd0\x16\xa8\x54\x8a\xda\x81\xa7\xaa\x42\x69\x72\x33\x44\x78\xec\xa9\xed\x30\x45\x96\x37\xc0\x2a\xd8\x05\x0f\xac\x07\xd6\x81\x6c\x67\x4a\x9a\x71\x3a\xfd\xf3\xcb\xc8\x9e\xeb\xfb\x73\xce\xb9\xd7\x89\xec\xaa\x1a\x56\x24\xb5\xc2\x19\x6c\x6a\x4d\x26\x4a\x34\x85\xfa\x90\x9f\x53\x3c\xca\x67\x68\x4c\x0a\x93\x22\x67\x89\xe0\x0b\x28\xcf\xc9\x09\x5f\xa4\x90\xa0\x10\x80\x42\x70\x91\xea\x08\x00\xa0\xae\xec\x16\xc6\x20\xf8\x82\x38\x73\x77\x6c\x97\xd6\x22\x67\x53\x04\x72\xd4\x50\xfa\xba\x46\x5a\xca\x03\x56\x71\x63\x36\x6c\x48\xa2\x35\x79\xdb\xcc\xe6\x3e\x54\x16\xf9\x1b\xc8\x4a\x63\xd2\x17\xce\xe7\x7f\x63\x60\x35\x05\x7d\xe5\x50\xa0\x6a\x04\x73\x5b\x13\x75\x0e\x4c\x14\x6d\x6d\xc1\x9f\x9f\xbf\x7e\x7f\xff\xe1\x6a\x82\xbc\x2c\x43\x05\x41\x52\xa8\x4b\x28\x38\x53\x78\xa9\xc8\xae\xff\xcd\xc0\x21\x10\x04\x20\xa1\xb9\x54\x07\x25\xd4\x4c\x3d\x7f\x96\x41\xbf\xf8\x82\x33\x06\xdb\x63\x8b\xce\x1b\x54\xd6\x79\x06\xb1\xd6\x64\xef\x95\xbf\x1f\xa7\xce\x4c\x5e\x50\x6b\x15\xd7\x4c\xa2\x50\xd6\x19\xb7\xe1\xde\x8b\x7a\x5a\xb3\x6b\xe9\xc5\xf0\xff\x55\xb5\x5d\x08\x47\x75\x36\x42\xe7\x84\x1c\x38\x27\x0e\xce\xc3\x5a\x2a\x63\xb4\xae\x2b\x18\xd5\xc6\x64\x71\xff\x32\x52\x89\xd6\xc0\xa1\x1a\x6b\x3d\x42\xfa\x6f\x7b\xdd\x38\x4e\xe1\x6b\x4e\x1b\x94\x90\x68\xdd\x06\x79\x97\x8b\x2f\xc6\xa4\xb1\x33\xbc\x68\x0b\x9d\x1c\x1f\xfa\x7f\x93\x38\x54\x43\x9c\xd9\x72\xd3\x96\x1e\xe9\x31\xdb\x1e\x3b\xa8\xc8\xfe\x25\x16\x2d\xea\x1e\xac\x8b\x6c\x55\x2d\xde\xbb\x57\xca\x90\x50\xba\x62\xe9\xca\x70\xbd\x64\x3c\xa1\xd9\x52\xb4\x28\xc9\xa1\x3d\xf1\x31\xcb\x24\xed\xe9\xca\xa9\xa9\x44\x7a\x17\x35\x39\xb9\xa0\xa8\xf2\x02\xb5\x09\xb4\xcc\x1d\x55\x53\x22\x45\x85\x50\x09\x3e\x0b\xab\x66\xf1\x19\x05\xda\xb0\x63\xd8\x59\xe1\x6a\xcf\xdd\x5e\xcf\xd5\xa7\x25\x24\x43\x44\x41\x5d\x06\xc1\x69\xe6\x65\xae\x30\x84\x4f\x18\x1e\x6f\x3f\x51\x02\xa4\x12\x35\x9b\x66\x6d\xfe\xcb\x5d\x2e\xa6\x12\x4e\xcf\xba\x10\x76\x10\x84\x7b\x41\xe8\x63\x86\xd1\x93\xa8\xa0\xdf\x76\x0f\x6e\xbd\x1b\xda\x6f\xbc\xd3\x1e\xd8\xa8\xbe\xf6\x3e\x67\x1f\x5d\xba\x8f\xc1\x99\x05\x93\x10\xd2\x27\xce\x33\x47\x6b\xa9\xee\xa0\xeb\xb5\x34\x81\x7d\x29\xe4\x09\xca\x86\x2a\x38\x3d\x0b\xb9\xee\x8e\xd0\xfb\x51\x29\x91\x62\xa1\x20\x80\xf7\x00\x69\x2f\xdb\xb7\xe7\x16\x8c\xad\x1f\x9a\x43\x71\xe3\xe1\xee\x1c\x64\x79\xe2\x2a\xb9\xc5\x14\xe5\x8b\xde\x18\x3d\x6e\x50\x7c\xbb\x91\xea\xa1\x71\x18\x1c\x89\x25\x56\x28\x5c\x18\xb2\x4b\xb9\xc4\x76\x08\x56\xbc\x3d\x3c\xb2\x61\xd2\xbe\x17\xbe\xb0\xf9\x84\x48\xd6\xe6\x9a\xe5\xea\x17\x82\xf5\x3a\xf4\xc6\x07\xb2\x5c\x2e\xd3\x4f\x60\xa9\xb5\x31\xe4\xf3\x39\xb2\xb2\xa3\xbf\xcc\xfe\x9f\x76\x8a\xbc\x4a\x41\x92\x7d\x21\xc2\x73\xbe\xe0\x0d\x7b\xd4\x8e\x48\x14\x57\x39\xb5\xcf\xc1\xd3\x27\x0f\xfe\x7a\x68\x95\xef\x92\x4c\x36\xd3\x1b\x1e\x84\x07\x4b\xae\x33\x55\x9c\xd6\x4e\xf8\x62\x48\x6e\x9e\xd1\x0d\x57\xe8\xca\x98\x89\xa2\xbf\x01\x00\x00\xff\xff\x1e\xa3\x56\x72\x67\x0a\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 2663, mode: os.FileMode(420), modTime: time.Unix(1624423447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplCurd2Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4f\x6f\xe3\x44\x14\x3f\xc7\x9f\xe2\xe1\xc3\xca\xde\x5a\x8e\x04\x88\xc3\xa2\x08\x2d\x6d\x59\x22\x85\xa0\x6d\xba\x5c\x56\xab\xca\xb5\x5f\x8a\xc5\x64\xa6\x9d\x19\x93\x22\xcb\xf7\x15\x12\x70\xda\x45\x08\x21\xed\x4a\x1c\x38\xa1\x3d\x20\xed\x01\xf1\x71\x52\x95\x6f\x81\x66\xc6\xc9\xba\xce\xb8\x76\x43\x0a\x1c\xf0\xa5\x75\xfc\x32\xf3\xde\xef\xcf\xbc\xe7\x38\x8e\xe3\x4c\x33\x1a\xc3\x09\xca\x3c\x0f\x27\x92\x67\xb1\x3c\x8c\x8e\x09\x8e\xa3\x19\x16\xc5\xea\x5f\xcf\x07\x21\x79\x4a\x4f\x20\x77\x00\x00\x38\xca\x8c\x53\x70\xf3\x3c\xac\x84\xbb\x4e\xe1\x38\x31\xa3\x42\x42\x4a\x05\x72\xeb\x9a\x1f\xa5\x48\x12\x01\x03\x70\xdd\x65\x30\x49\x45\xd7\xd0\xe4\xd8\x16\xa8\x42\x32\x81\xdc\x35\xe5\x78\xa9\xc4\x19\xdc\xb5\x45\xfa\x30\x89\x23\xea\x71\x36\x87\xe4\x38\x3c\x60\x73\x1f\x3c\xe4\x1c\x90\x73\xc6\x7d\x53\x5c\x3a\x55\xb7\x30\x00\xce\xe6\xa1\x0e\xd7\x1f\xab\x2b\xcf\x79\x44\x4f\x10\xc2\x71\x46\x88\x49\x6f\x48\xa7\xac\x28\x56\x11\x77\xd4\x97\xf2\x3c\xfc\x38\x9b\x9d\x9a\x2d\x83\xca\xb7\x91\x26\x65\xac\xff\xbe\xde\xe4\xad\x01\xd0\x94\x94\xa8\xbe\x41\x56\xdf\x16\x15\xa8\x15\xb2\xfd\x3e\x5c\xbc\xfe\x7d\xf1\xf5\x0b\xc3\x59\x94\x24\x5e\x2c\xcf\x21\x66\x54\xe2\xb9\x0c\x77\xcd\xdf\x00\xbe\x8c\x48\x86\x60\xab\xde\x23\x91\x90\xc3\x04\x52\x2a\xdf\x7b\x37\x80\x7a\xe1\x31\xa3\x14\xee\x0d\x14\x32\x0f\x50\xaa\xc5\x83\x12\x57\x5f\x3f\x17\x67\x44\x3d\x76\x87\xe3\xc9\xfe\xc1\x21\x0c\xc7\x87\x9f\x82\x0b\x3b\x5d\xd4\xb3\x03\x2e\x78\x79\x1e\x0e\xb5\x2e\x34\x72\xa3\x54\x48\x45\x88\x0b\x3b\xab\xea\xd5\xe5\x7e\x76\x7f\xf4\x68\x7f\x52\x09\xff\x24\xe2\x5f\x14\x85\xef\xea\xb0\xb3\x32\xc3\xc9\xc3\x91\x79\xea\xb5\x6f\x1f\xa8\xd4\xfd\x12\x4e\x61\x0a\xbf\x37\xd0\xf5\x86\xfb\xe7\x18\x97\xd0\x99\x8a\xcf\x82\x75\xba\xcd\x4e\x86\x6a\x0d\x6f\x0b\xc5\x7e\x55\x48\xed\x1c\x1b\x5a\x02\x38\x52\xa2\x43\x11\x8e\xd4\xbd\xd9\x32\xf1\xfc\x9a\x0c\x34\xf9\x09\x12\x3b\xf9\xa9\x66\x17\xf9\x34\x8a\x31\x2f\x2c\xea\xee\x4a\x72\x82\x04\x25\xc2\x94\xb3\xd9\x4d\x48\x9e\x7f\x8e\x1c\x55\x16\x03\xf8\x60\x8d\xb0\x3d\xbd\xe6\xcd\x08\x3b\x0a\x4a\x37\x36\xb1\x05\x69\x52\x87\x68\x75\xae\xdd\x4f\x12\xab\x0f\x6e\xe8\x1b\xbf\xd1\x38\xd0\x0c\xaa\x6d\xa1\xa3\xbd\x0f\xff\x29\x2b\xfd\x6f\xa3\xeb\x6d\xd4\xef\xc3\xe2\xe9\x8b\x3f\x7f\xf8\x79\xf1\xcd\xb3\x8b\x9f\x5e\x5e\xfe\xfa\x6a\xf1\xc7\x33\xa3\x9a\x3d\x24\xdd\x55\x63\x04\x6f\xba\x63\x00\x11\x3f\x11\xf0\xf8\x49\x93\x05\x37\x91\x4b\xcf\xe6\xc8\xab\x8d\x57\x4b\x47\x27\xe2\xf4\xd6\xed\x56\xef\xd2\x25\x8d\x4e\xaf\xdd\x5a\xaa\x9c\x30\x0c\x2d\xd8\x5d\x7e\xfb\x7a\xf1\xdd\xf3\x75\xec\x1e\xd8\x55\x64\xc7\x6e\x6a\x1a\xfc\x12\xbc\x56\x28\x75\xdf\xb6\x2d\xdf\xad\x97\xb5\x39\xf2\x10\xcf\xa5\x46\x5a\x20\xc1\x58\x6a\x54\xcb\x14\x95\xe9\xae\x07\xbe\x66\xaa\x89\x5e\xc2\x8e\xbd\xda\xc7\x6c\x5a\x81\xff\x61\x86\xfc\xab\x03\x36\x6f\xa2\xa0\x36\x89\xa8\xab\xd7\x6b\x9c\x47\x2c\x63\x48\xbf\xaf\x92\xdf\x65\xb3\x19\x52\x59\x99\x58\x96\x2b\x55\x1c\x77\x75\xe6\xf8\xf1\xb7\x8b\xe7\xaf\x0c\xbb\x8f\x4e\x93\x48\x62\x77\x82\x33\x1d\x3f\x91\xfc\x06\x1c\x6f\xe5\x70\x5d\x51\x69\x32\xa8\xd3\x26\xd0\xb0\xfb\x26\x3f\x45\x70\x23\x99\xa6\xec\x36\x32\xff\x8e\x9d\x16\x4f\xbf\xbf\x7c\xf9\x8b\x01\x59\x8d\xc3\x1b\x9f\x35\x9c\xcd\xc5\x01\x8a\x8c\x48\x78\xfc\xa4\xcd\x2a\xdb\x00\xb8\xe2\x95\x96\x39\xfe\x96\x3c\xa4\x2a\xbe\xda\x8b\xb4\x95\xae\xc5\xbe\xa9\xa5\x58\xdb\x4a\x82\x53\xe4\x7a\x9b\x70\x97\x30\x81\x65\x2b\x99\xb2\xf2\xc3\xb1\xda\xc6\xaf\xaf\xc2\xe6\x2a\x1f\x1b\x1c\xf9\x55\xef\xad\xbf\x6e\xa8\x55\x9b\xde\x0f\x2c\x59\x2e\xaf\xa2\x9e\xc0\x52\x08\x03\x88\x4e\x4f\x91\x26\x15\x71\x04\xea\xb9\x5f\x29\x72\x95\x82\x08\xf7\x39\x5f\xeb\x96\x75\x8d\x8e\x1a\xa8\xde\xde\x39\xff\xaf\xa9\xf8\x76\x4f\xfc\x6d\xa9\xb5\xd7\xab\x28\xa0\xd7\x28\xd4\x16\xa5\x76\x53\x69\x55\xa1\xc2\xd2\x87\xb6\xd5\x85\xac\x1d\x69\x15\x71\x9d\x23\x6a\x6e\x28\x9c\x0d\x5c\x60\xb7\x41\xdd\x07\x5a\xfd\x31\xcb\xe8\xa6\x47\xb4\x27\x99\x8c\x88\x7a\x93\x78\xe7\xed\x6e\x63\x8b\xfd\x37\x8f\x46\x0d\x9b\xe4\xee\xfa\xff\x89\x79\xe5\x8e\xae\xd6\xf2\x7e\xf6\x57\x00\x00\x00\xff\xff\xea\x88\x00\xbd\x7b\x12\x00\x00")

func assetsTplCurd2MdBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurd2Md,
		"assets/tpl/curd2.md",
	)
}

func assetsTplCurd2Md() (*asset, error) {
	bytes, err := assetsTplCurd2MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd2.md", size: 4731, mode: os.FileMode(420), modTime: time.Unix(1610531769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplMcTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\xbd\x8e\xd4\x30\x10\xae\x9d\xa7\x18\x5c\xa0\x44\x8a\xb2\x27\x21\x9a\x48\x5b\xdd\xc2\xe9\xb4\x3a\x0a\x16\xd1\x22\xaf\x77\xb2\x67\x92\xd8\x91\x33\x91\x12\xad\xd2\x22\x6a\x68\xe8\x78\x02\xde\x80\xd7\x39\x21\xde\x02\x39\x76\xf6\x76\x0f\x8e\x0a\x09\x37\xf1\x78\xfe\xbe\x6f\xbe\x49\x23\x64\x29\xf6\x08\x7d\xdf\x47\x91\xaa\x1b\x63\x09\xe2\x08\x00\x80\x4b\xa3\x09\x7b\xe2\xde\x42\x2d\xcd\x4e\xe9\xfd\xe2\x7d\x6b\x74\x78\x2b\x6a\xe2\x91\xbf\xb6\x5a\x35\x68\x17\x1d\xa9\x6a\x21\x85\xbc\xc5\x12\x07\xfe\xbb\xab\x96\x3c\x4a\xa2\x48\x1a\xdd\xce\x7d\x16\x0b\x78\xa9\x7a\xb8\xc1\xc9\x3a\x1c\xb2\x0d\xd9\x4e\xd2\x1b\xb1\xad\xf0\x95\xa8\x71\x1c\xd7\x38\xc0\x12\x78\xef\xce\x94\x5e\x74\x5a\x82\xd2\x8a\xe2\xe4\x30\x65\xcd\x1d\xb3\xd7\xb8\x57\x2d\xa1\x8d\x8f\x2f\x6b\x1c\xae\x75\x61\x7c\x1c\x63\xe7\xdd\x18\x73\x1d\xf2\xc7\xba\xa6\x21\x68\x65\x64\x0e\xc0\x79\xb0\xc7\x24\x1a\x03\x88\x0d\xd2\x9f\x72\x2f\x5d\xf7\x58\x52\x0f\x61\x88\xd9\xa5\xff\xa6\xa0\x76\xa0\x34\xa1\x2d\x84\xc4\xc3\x98\xc4\x68\x2d\xa0\xb5\xc6\xce\x54\x20\x5f\x42\x2d\xb3\x2b\x24\x57\x20\x05\xbe\xc3\x42\x74\x15\xf1\x64\xf2\x97\x38\xb8\x88\xa2\xa6\x6c\xd3\x58\xa5\x29\x7e\x04\x7c\xe2\x95\xd9\xa6\xae\xbc\x4b\x71\xc2\x65\x37\xc2\xb6\xb7\xa2\x8a\xd5\xce\x97\x53\xc5\xe4\x7e\xb2\x04\xad\x2a\xf0\x10\xdc\xb1\x48\x9d\xd5\x93\x39\xfa\x42\x2e\x6c\x09\x32\xdb\xcc\xc0\x9e\xd6\x32\xbb\x26\xac\xef\x93\xd6\x38\xe4\xf3\xbd\x9c\xc7\xe7\xce\x5b\x51\x75\x18\x5c\xdb\xfb\xe7\x17\x7d\xa3\xac\x20\x65\x74\x0e\xcf\x2e\x2e\x52\xb7\x0b\x3f\xbe\x7f\xbe\xfb\xf6\x05\x9e\xc3\xdd\xc7\x0f\x3f\x3f\x7d\xf5\x08\x02\x97\x00\x6a\x1e\xfe\xd5\x3f\x1f\xfe\xf9\x76\xfc\x4d\x0a\x16\x74\xe0\xd3\x4e\x46\xec\x5d\x7a\x1c\xd0\x31\xbc\x74\x22\xb0\x87\x13\x66\x2c\xd0\x60\xe3\x03\x52\x9e\xd5\x0a\xab\xff\xc6\xea\x64\xc1\xb8\xff\xdb\x4e\x95\x5f\x61\x85\x84\x27\xdc\xce\xe0\xff\x0a\x00\x00\xff\xff\x8f\x89\x42\xbd\x4a\x04\x00\x00")

func assetsTplMcTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplMcTpl,
		"assets/tpl/mc.tpl",
	)
}

func assetsTplMcTpl() (*asset, error) {
	bytes, err := assetsTplMcTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/mc.tpl", size: 1098, mode: os.FileMode(420), modTime: time.Unix(1617161061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl": assetsTplCurdTpl,
	"assets/tpl/curd2.md": assetsTplCurd2Md,
	"assets/tpl/mc.tpl":   assetsTplMcTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl": &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"curd2.md": &bintree{assetsTplCurd2Md, map[string]*bintree{}},
			"mc.tpl":   &bintree{assetsTplMcTpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
