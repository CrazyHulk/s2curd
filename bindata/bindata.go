// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.// sources:
// assets/tpl/curd.tpl
// assets/tpl/curd2.md
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTplCurdTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6b\xf3\x46\x10\x3e\x57\xbf\x62\xaa\x43\xd0\xc6\x42\x81\xb6\xf4\x90\x60\x4a\x48\xdd\xd6\xe0\xba\xc4\x76\x7a\x09\x21\x28\xd2\xd8\x15\x95\x77\x9d\xdd\x15\x76\x11\xba\x97\x42\xdb\x53\xd2\x43\x29\x34\xb7\x9e\x4a\x0e\x85\x1c\xca\xfb\x73\x1c\xf2\x33\x5e\x76\x57\x51\x64\x5b\x8e\xec\xbc\x89\x2e\x89\xb4\xb3\xf3\xf1\x3c\xcf\xcc\xd8\xb2\x2c\x6b\x98\xd0\x00\x46\x28\xd3\xd4\xeb\x4b\x9e\x04\x72\xe0\x5f\xc4\xd8\xf5\xc7\x98\x65\xc5\xbf\x0e\x01\x21\x79\x44\x47\x90\x5a\x00\x00\x1c\x65\xc2\x29\xd8\x69\xea\x95\xcc\x6d\x2b\xb3\xac\x80\x51\x21\x21\xa2\x02\x79\xa5\xcf\xaf\x22\x8c\x43\x01\x4d\x7d\xb9\xad\xcd\xf4\xa7\x4e\x24\xa4\x72\x91\x3b\x88\x23\x51\x7f\xfd\x30\x8e\xab\xee\x86\x17\x55\x37\xd5\x9d\x44\x20\xb7\x4d\xcd\x4e\x24\x71\x0c\xbb\x55\x96\x04\xfa\x81\x4f\x1d\xce\xa6\x10\x5e\x78\x3d\x36\x25\xe0\x20\xe7\x80\x9c\x33\x4e\x0c\x02\xd1\x50\xbd\x42\x13\x38\x9b\x7a\xda\x5c\x7f\x56\x4f\x9a\x72\x9f\x8e\x10\xbc\x6e\x92\xe7\x27\xda\x74\xc8\xb2\x6c\x47\x85\xf4\xd2\xd4\xfb\x26\x19\x4f\x4c\x28\xd7\x32\x37\x90\x86\x59\x46\x0e\xb4\xcf\x8f\x9b\x40\xa3\x38\x47\xfa\x09\x6d\xfd\x9a\x95\xe0\x57\x68\xef\xed\xc1\xfd\xdd\xff\xf3\x5f\xfe\x36\x3c\xfa\x61\x58\x59\xba\x13\xc8\x19\x04\x8c\x4a\x9c\x49\xef\xc8\xfc\x75\x41\x23\x50\x09\x80\x13\xfb\x42\xb6\x43\x88\xa8\xfc\xfc\x33\x17\x96\x8b\x0f\x18\xa5\xb0\xdf\x54\xe8\x7c\x8d\x52\x39\x77\x73\x6c\x89\x3e\x17\x97\xb1\x3a\xb6\xdb\xdd\x7e\xab\x37\x80\x76\x77\xf0\x1d\xd8\xd0\xd8\x44\x66\x0d\xb0\xc1\x51\xb6\xb5\x0a\x6a\x80\x4d\x94\xd7\x02\x26\xf5\xd8\xdf\x1f\x76\x4e\x5a\x7d\x70\x0a\x71\x7d\xeb\xf3\x1f\xb3\x8c\xd8\xda\xec\x32\xcf\xba\x7f\xdc\x31\xa7\x4e\x7d\x4a\xae\x2a\x87\xe4\xb8\x0b\x03\xc6\x7e\x53\x63\xe0\xb5\x66\x18\xe4\x70\x1a\x14\x2e\xdd\x55\x19\x98\x48\x46\x02\xeb\x14\x50\x56\x41\x59\x5f\xf5\x5a\x30\x4c\xb9\x70\xae\xb4\x88\xc2\xeb\xa8\x77\x13\x31\x74\xc8\x92\x5c\xb4\x48\x42\x8c\xb7\x11\x89\x56\x01\xf2\xa1\x1f\x60\x9a\x55\x74\xc2\xa6\x62\x08\x31\x46\x89\x30\xe4\x6c\xbc\x8d\x18\xa6\x3f\x20\x47\x95\x45\x13\xbe\x58\x21\xf1\x4b\xed\x73\x3b\x12\xcf\xdd\xbc\x73\xd7\x31\x08\x51\xb8\x8c\x9b\xea\xb3\x87\xdf\xee\xe6\xbf\x5f\xcf\x7f\xbd\xba\xff\xeb\xe6\xe1\xdf\xdb\xf9\xbb\xab\x67\x67\xe7\x1a\x38\x4d\x39\x66\x98\xba\xe0\xf3\x91\x80\xd3\xb3\x32\xc0\x7a\xec\x54\x39\xdc\xac\x0d\xab\x67\x5f\xc1\xc4\x00\x67\x52\xb3\x21\x30\xc6\x40\x6a\x22\x6a\x46\xad\x22\x61\x5b\xd2\x94\xa9\xae\x74\x99\xb0\xbe\x0e\xbb\x29\x61\x2a\xdb\x22\xf5\x1e\x9b\x16\x7d\x77\x9c\x20\xff\xa9\xc7\xa6\xcb\xcc\x29\x3c\x3d\xcf\x23\x6b\x46\xb4\xf1\x42\x0e\x54\x32\x6d\xd1\x65\x3d\x36\x15\x2d\xce\x95\xa4\x49\xde\x63\x1f\x99\x2b\x34\x8a\xd7\xce\xdb\x3f\xff\xbb\xbf\xbe\x35\xdc\x27\x93\xd0\x97\x58\x55\x4a\x35\xfb\xc6\xbe\x2f\x79\xa1\x80\x7a\x3d\x3c\xb1\x0e\x1f\x4e\xbb\x49\x60\x1b\x2a\x05\x1a\x95\x3c\xa5\xfe\x2c\xc1\x27\xda\x6c\x7b\x82\xeb\xbb\x72\x81\xdb\x05\x46\xe6\x3f\xff\xf1\x70\xf3\x8f\x61\x64\x9d\x98\x5f\xda\x8e\xa0\xfa\x51\xf4\x50\x24\xb1\x84\xd3\xb3\xba\xc6\x7c\x05\x8a\x5e\xd2\x99\x8d\x7a\xbc\x1b\x6f\xd0\x95\x0a\x9a\xc5\x85\xa8\x1b\x73\x93\xae\x5c\x59\x6c\x95\xcb\x2d\xc4\x21\x72\x1d\xc6\x3b\x8a\x99\xc0\x7c\xa1\x0d\x59\xfe\xb1\xab\xc2\x90\x65\x2f\x66\x50\x54\x95\x92\x66\x0b\x96\xab\x13\x42\x79\x5d\xf7\x33\xac\x22\xcb\xc7\x27\x5b\x4e\xe0\x51\x31\x4d\xf0\x27\x13\xa4\x61\x49\x45\xae\x3a\x27\xa5\x22\x8b\x14\x84\xa7\x86\xd1\xca\xee\x31\xc2\x0e\x58\x42\x5f\x77\xd1\x48\x26\xfd\x58\x2d\xf7\x4f\x3f\x79\x93\xdd\xa2\x33\x76\x76\xc9\xa3\x46\x37\x98\x38\x6f\x21\xd2\xd2\x58\xa9\x5b\x1b\x46\x03\x3b\x1a\x98\x55\x1a\xac\xf7\x01\x00\x00\xff\xff\x47\x09\xb4\xe5\x2f\x0d\x00\x00")

func assetsTplCurdTplBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurdTpl,
		"assets/tpl/curd.tpl",
	)
}

func assetsTplCurdTpl() (*asset, error) {
	bytes, err := assetsTplCurdTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd.tpl", size: 3375, mode: os.FileMode(420), modTime: time.Unix(1610535031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTplCurd2Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4f\x6f\xe3\x44\x14\x3f\xc7\x9f\xe2\xe1\xc3\xca\xde\x5a\x8e\x04\x88\xc3\xa2\x08\x2d\x6d\x59\x22\x85\xa0\x6d\xba\x5c\x56\xab\xca\xb5\x5f\x8a\xc5\x64\xa6\x9d\x19\x93\x22\xcb\xf7\x15\x12\x70\xda\x45\x08\x21\xed\x4a\x1c\x38\xa1\x3d\x20\xed\x01\xf1\x71\x52\x95\x6f\x81\x66\xc6\xc9\xba\xce\xb8\x76\x43\x0a\x1c\xf0\xa5\x75\xfc\x32\xf3\xde\xef\xcf\xbc\xe7\x38\x8e\xe3\x4c\x33\x1a\xc3\x09\xca\x3c\x0f\x27\x92\x67\xb1\x3c\x8c\x8e\x09\x8e\xa3\x19\x16\xc5\xea\x5f\xcf\x07\x21\x79\x4a\x4f\x20\x77\x00\x00\x38\xca\x8c\x53\x70\xf3\x3c\xac\x84\xbb\x4e\xe1\x38\x31\xa3\x42\x42\x4a\x05\x72\xeb\x9a\x1f\xa5\x48\x12\x01\x03\x70\xdd\x65\x30\x49\x45\xd7\xd0\xe4\xd8\x16\xa8\x42\x32\x81\xdc\x35\xe5\x78\xa9\xc4\x19\xdc\xb5\x45\xfa\x30\x89\x23\xea\x71\x36\x87\xe4\x38\x3c\x60\x73\x1f\x3c\xe4\x1c\x90\x73\xc6\x7d\x53\x5c\x3a\x55\xb7\x30\x00\xce\xe6\xa1\x0e\xd7\x1f\xab\x2b\xcf\x79\x44\x4f\x10\xc2\x71\x46\x88\x49\x6f\x48\xa7\xac\x28\x56\x11\x77\xd4\x97\xf2\x3c\xfc\x38\x9b\x9d\x9a\x2d\x83\xca\xb7\x91\x26\x65\xac\xff\xbe\xde\xe4\xad\x01\xd0\x94\x94\xa8\xbe\x41\x56\xdf\x16\x15\xa8\x15\xb2\xfd\x3e\x5c\xbc\xfe\x7d\xf1\xf5\x0b\xc3\x59\x94\x24\x5e\x2c\xcf\x21\x66\x54\xe2\xb9\x0c\x77\xcd\xdf\x00\xbe\x8c\x48\x86\x60\xab\xde\x23\x91\x90\xc3\x04\x52\x2a\xdf\x7b\x37\x80\x7a\xe1\x31\xa3\x14\xee\x0d\x14\x32\x0f\x50\xaa\xc5\x83\x12\x57\x5f\x3f\x17\x67\x44\x3d\x76\x87\xe3\xc9\xfe\xc1\x21\x0c\xc7\x87\x9f\x82\x0b\x3b\x5d\xd4\xb3\x03\x2e\x78\x79\x1e\x0e\xb5\x2e\x34\x72\xa3\x54\x48\x45\x88\x0b\x3b\xab\xea\xd5\xe5\x7e\x76\x7f\xf4\x68\x7f\x52\x09\xff\x24\xe2\x5f\x14\x85\xef\xea\xb0\xb3\x32\xc3\xc9\xc3\x91\x79\xea\xb5\x6f\x1f\xa8\xd4\xfd\x12\x4e\x61\x0a\xbf\x37\xd0\xf5\x86\xfb\xe7\x18\x97\xd0\x99\x8a\xcf\x82\x75\xba\xcd\x4e\x86\x6a\x0d\x6f\x0b\xc5\x7e\x55\x48\xed\x1c\x1b\x5a\x02\x38\x52\xa2\x43\x11\x8e\xd4\xbd\xd9\x32\xf1\xfc\x9a\x0c\x34\xf9\x09\x12\x3b\xf9\xa9\x66\x17\xf9\x34\x8a\x31\x2f\x2c\xea\xee\x4a\x72\x82\x04\x25\xc2\x94\xb3\xd9\x4d\x48\x9e\x7f\x8e\x1c\x55\x16\x03\xf8\x60\x8d\xb0\x3d\xbd\xe6\xcd\x08\x3b\x0a\x4a\x37\x36\xb1\x05\x69\x52\x87\x68\x75\xae\xdd\x4f\x12\xab\x0f\x6e\xe8\x1b\xbf\xd1\x38\xd0\x0c\xaa\x6d\xa1\xa3\xbd\x0f\xff\x29\x2b\xfd\x6f\xa3\xeb\x6d\xd4\xef\xc3\xe2\xe9\x8b\x3f\x7f\xf8\x79\xf1\xcd\xb3\x8b\x9f\x5e\x5e\xfe\xfa\x6a\xf1\xc7\x33\xa3\x9a\x3d\x24\xdd\x55\x63\x04\x6f\xba\x63\x00\x11\x3f\x11\xf0\xf8\x49\x93\x05\x37\x91\x4b\xcf\xe6\xc8\xab\x8d\x57\x4b\x47\x27\xe2\xf4\xd6\xed\x56\xef\xd2\x25\x8d\x4e\xaf\xdd\x5a\xaa\x9c\x30\x0c\x2d\xd8\x5d\x7e\xfb\x7a\xf1\xdd\xf3\x75\xec\x1e\xd8\x55\x64\xc7\x6e\x6a\x1a\xfc\x12\xbc\x56\x28\x75\xdf\xb6\x2d\xdf\xad\x97\xb5\x39\xf2\x10\xcf\xa5\x46\x5a\x20\xc1\x58\x6a\x54\xcb\x14\x95\xe9\xae\x07\xbe\x66\xaa\x89\x5e\xc2\x8e\xbd\xda\xc7\x6c\x5a\x81\xff\x61\x86\xfc\xab\x03\x36\x6f\xa2\xa0\x36\x89\xa8\xab\xd7\x6b\x9c\x47\x2c\x63\x48\xbf\xaf\x92\xdf\x65\xb3\x19\x52\x59\x99\x58\x96\x2b\x55\x1c\x77\x75\xe6\xf8\xf1\xb7\x8b\xe7\xaf\x0c\xbb\x8f\x4e\x93\x48\x62\x77\x82\x33\x1d\x3f\x91\xfc\x06\x1c\x6f\xe5\x70\x5d\x51\x69\x32\xa8\xd3\x26\xd0\xb0\xfb\x26\x3f\x45\x70\x23\x99\xa6\xec\x36\x32\xff\x8e\x9d\x16\x4f\xbf\xbf\x7c\xf9\x8b\x01\x59\x8d\xc3\x1b\x9f\x35\x9c\xcd\xc5\x01\x8a\x8c\x48\x78\xfc\xa4\xcd\x2a\xdb\x00\xb8\xe2\x95\x96\x39\xfe\x96\x3c\xa4\x2a\xbe\xda\x8b\xb4\x95\xae\xc5\xbe\xa9\xa5\x58\xdb\x4a\x82\x53\xe4\x7a\x9b\x70\x97\x30\x81\x65\x2b\x99\xb2\xf2\xc3\xb1\xda\xc6\xaf\xaf\xc2\xe6\x2a\x1f\x1b\x1c\xf9\x55\xef\xad\xbf\x6e\xa8\x55\x9b\xde\x0f\x2c\x59\x2e\xaf\xa2\x9e\xc0\x52\x08\x03\x88\x4e\x4f\x91\x26\x15\x71\x04\xea\xb9\x5f\x29\x72\x95\x82\x08\xf7\x39\x5f\xeb\x96\x75\x8d\x8e\x1a\xa8\xde\xde\x39\xff\xaf\xa9\xf8\x76\x4f\xfc\x6d\xa9\xb5\xd7\xab\x28\xa0\xd7\x28\xd4\x16\xa5\x76\x53\x69\x55\xa1\xc2\xd2\x87\xb6\xd5\x85\xac\x1d\x69\x15\x71\x9d\x23\x6a\x6e\x28\x9c\x0d\x5c\x60\xb7\x41\xdd\x07\x5a\xfd\x31\xcb\xe8\xa6\x47\xb4\x27\x99\x8c\x88\x7a\x93\x78\xe7\xed\x6e\x63\x8b\xfd\x37\x8f\x46\x0d\x9b\xe4\xee\xfa\xff\x89\x79\xe5\x8e\xae\xd6\xf2\x7e\xf6\x57\x00\x00\x00\xff\xff\xea\x88\x00\xbd\x7b\x12\x00\x00")

func assetsTplCurd2MdBytes() ([]byte, error) {
	return bindataRead(
		_assetsTplCurd2Md,
		"assets/tpl/curd2.md",
	)
}

func assetsTplCurd2Md() (*asset, error) {
	bytes, err := assetsTplCurd2MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/tpl/curd2.md", size: 4731, mode: os.FileMode(420), modTime: time.Unix(1610531769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/tpl/curd.tpl": assetsTplCurdTpl,
	"assets/tpl/curd2.md": assetsTplCurd2Md,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"tpl": &bintree{nil, map[string]*bintree{
			"curd.tpl": &bintree{assetsTplCurdTpl, map[string]*bintree{}},
			"curd2.md": &bintree{assetsTplCurd2Md, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
